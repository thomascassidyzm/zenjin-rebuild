<?xml version="1.0" encoding="UTF-8"?>
<Interface name="AuthenticationFlowInterface" module="Authentication">
  <Purpose>
    Defines contracts for authentication flow completion with proper user data availability guarantees.
    Eliminates timing dependencies and ensures Auth-to-Player flow receives complete user context.
  </Purpose>
  
  <ContextBoundary size="medium" tokenEstimate="4000">
    Authentication completion handling, user context creation, and Auth-to-Player flow initialization.
  </ContextBoundary>
  
  <Types>
    <Type name="AuthenticationResult">
      <Field name="success" type="boolean" required="true" />
      <Field name="user" type="AuthenticatedUser" required="false">
        Present when success=true, contains complete user data
      </Field>
      <Field name="error" type="string" required="false">
        Present when success=false, contains error message
      </Field>
    </Type>
    
    <Type name="AuthenticatedUser">
      <Field name="id" type="string" required="true">
        Unique user identifier from authentication system
      </Field>
      <Field name="email" type="string" required="true">
        Verified email address
      </Field>
      <Field name="displayName" type="string" required="false">
        User display name
      </Field>
      <Field name="userType" type="string" required="true">
        Type of user account (registered, anonymous, etc.)
      </Field>
      <Field name="subscriptionTier" type="string" required="true">
        User subscription level
      </Field>
    </Type>
    
    <Type name="AuthenticationMethod">
      <Values>PASSWORD | OTP | ANONYMOUS</Values>
    </Type>
  </Types>
  
  <Interfaces>
    <Interface name="onAuthenticationComplete">
      <Purpose>Handle authentication completion with guaranteed user data availability</Purpose>
      <Input name="result" type="AuthenticationResult" required="true">
        Complete authentication result with user data when successful
      </Input>
      <Input name="method" type="AuthenticationMethod" required="true">
        Method used for authentication
      </Input>
      <Behavior>
        <Preconditions>
          <Precondition>If result.success=true, result.user must be fully populated</Precondition>
          <Precondition>User data must be immediately available without async dependencies</Precondition>
        </Preconditions>
        <Postconditions>
          <Postcondition>Auth-to-Player flow initialized with valid user context</Postcondition>
          <Postcondition>No further session state dependencies required</Postcondition>
        </Postconditions>
      </Behavior>
    </Interface>
    
    <Interface name="createUserContext">
      <Purpose>Create typed user context from authentication result</Purpose>
      <Input name="user" type="AuthenticatedUser" required="true" />
      <Output name="context" type="AuthenticatedUserContext">
        APML-compliant user context for Auth-to-Player flow
      </Output>
      <Behavior>
        <Invariants>
          <Invariant>Output context must have all required fields populated</Invariant>
          <Invariant>No null or undefined values in required fields</Invariant>
        </Invariants>
      </Behavior>
    </Interface>
    
    <Interface name="handlePasswordAuthentication">
      <Purpose>Process password authentication with proper error handling</Purpose>
      <Input name="email" type="string" required="true" />
      <Input name="password" type="string" required="true" />
      <Output name="result" type="AuthenticationResult" />
      <Behavior>
        <OnSuccess>Returns AuthenticationResult with populated user data</OnSuccess>
        <OnFailure>Returns AuthenticationResult with specific error message</OnFailure>
        <ErrorCodes>
          <ErrorCode>INVALID_CREDENTIALS</ErrorCode>
          <ErrorCode>SERVICE_UNAVAILABLE</ErrorCode>
          <ErrorCode>USER_REGISTRATION_FAILED</ErrorCode>
        </ErrorCodes>
      </Behavior>
    </Interface>
  </Interfaces>
  
  <ValidationCriteria>
    <Criterion id="AF001" test="tests/authentication/auth-completion.test.ts">
      Authentication completion must provide complete user data synchronously
    </Criterion>
    <Criterion id="AF002" test="tests/authentication/password-auth.test.ts">
      Password authentication must handle both sign-in and auto-registration
    </Criterion>
    <Criterion id="AF003" test="tests/authentication/user-context-creation.test.ts">
      User context creation must never produce null/undefined required fields
    </Criterion>
  </ValidationCriteria>
</Interface>