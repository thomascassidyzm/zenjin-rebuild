<?xml version="1.0" encoding="UTF-8"?>
<Interface name="AnonymousUserServiceInterface" module="Authentication">
  <Purpose>
    Defines contract for anonymous user creation services with multiple implementation strategies.
    Enables seamless switching between online backend services and offline local fallbacks.
  </Purpose>
  
  <ContextBoundary size="medium" tokenEstimate="3000">
    Service adapter pattern for external anonymous user creation with defined fallback behaviors.
  </ContextBoundary>
  
  <ServiceModes>
    <Mode name="Online">
      Creates anonymous users via backend API with persistent storage
    </Mode>
    <Mode name="Offline">
      Creates anonymous users locally with temporary storage
    </Mode>
    <Mode name="Hybrid">
      Attempts online creation, falls back to offline on failure
    </Mode>
  </ServiceModes>
  
  <Interfaces>
    <Interface name="createAnonymousUser">
      <Purpose>Create new anonymous user with session</Purpose>
      <Input name="request" type="AnonymousUserCreationRequest" required="true">
        <Field name="deviceId" type="string" required="false" />
        <Field name="mode" type="ServiceMode" required="false" default="Hybrid" />
        <Field name="initialSessionData" type="object" required="false" />
        <Field name="ttlHours" type="number" required="false" default="168" />
      </Input>
      <Output name="result" type="AnonymousUserCreationResult">
        <Field name="success" type="boolean" />
        <Field name="user" type="AnonymousUser" required="false" />
        <Field name="session" type="AnonymousSession" required="false" />
        <Field name="initialState" type="UserApplicationState" required="false" />
        <Field name="mode" type="ServiceMode">Indicates which mode was used</Field>
        <Field name="error" type="string" required="false" />
        <Field name="errorCode" type="string" required="false" />
        <Field name="isOffline" type="boolean">True if offline mode was used</Field>
      </Output>
      <Behavior>
        <OnSuccess>Returns complete user data with session and initial state</OnSuccess>
        <OnFailure>Returns error details with specific error codes for different failure types</OnFailure>
        <Invariants>
          <Invariant>Must always return a valid result object</Invariant>
          <Invariant>Success=true requires user, session, and initialState</Invariant>
          <Invariant>Success=false requires error and errorCode</Invariant>
        </Invariants>
      </Behavior>
    </Interface>
    
    <Interface name="validateAnonymousSession">
      <Purpose>Validate existing anonymous session token</Purpose>
      <Input name="token" type="string" required="true" />
      <Output name="validation" type="SessionValidationResult">
        <Field name="isValid" type="boolean" />
        <Field name="userId" type="string" required="false" />
        <Field name="expiresAt" type="number" required="false" />
        <Field name="isOffline" type="boolean" />
        <Field name="error" type="string" required="false" />
      </Output>
    </Interface>
    
    <Interface name="getServiceStatus">
      <Purpose>Check current service availability and mode</Purpose>
      <Output name="status" type="ServiceStatus">
        <Field name="isOnline" type="boolean" />
        <Field name="mode" type="ServiceMode" />
        <Field name="lastCheck" type="string" />
        <Field name="responseTime" type="number" required="false" />
      </Output>
    </Interface>
  </Interfaces>
  
  <Types>
    <Type name="ServiceMode">
      <Values>Online | Offline | Hybrid</Values>
    </Type>
    
    <Type name="AnonymousUser">
      <Field name="id" type="string" />
      <Field name="anonymousId" type="string" />
      <Field name="displayName" type="string" />
      <Field name="userType" type="string" value="anonymous" />
      <Field name="subscriptionTier" type="string" />
      <Field name="isLocal" type="boolean" />
      <Field name="expiresAt" type="string" required="false" />
      <Field name="createdAt" type="string" />
    </Type>
    
    <Type name="AnonymousSession">
      <Field name="accessToken" type="string" />
      <Field name="userType" type="string" value="anonymous" />
      <Field name="isLocal" type="boolean" />
      <Field name="expiresAt" type="number" required="false" />
    </Type>
    
    <Type name="ErrorCodes">
      <Values>
        SERVICE_UNAVAILABLE | DATABASE_ERROR | USER_CREATION_FAILED | 
        STATE_INITIALIZATION_FAILED | TOKEN_GENERATION_FAILED | 
        OFFLINE_STORAGE_FAILED | VALIDATION_FAILED
      </Values>
    </Type>
  </Types>
  
  <ValidationCriteria>
    <Criterion id="AUS001" test="tests/anonymous-user-service/online-creation.test.ts">
      Online mode must successfully create users when backend is available
    </Criterion>
    <Criterion id="AUS002" test="tests/anonymous-user-service/offline-fallback.test.ts">
      Offline mode must create local users when backend is unavailable
    </Criterion>
    <Criterion id="AUS003" test="tests/anonymous-user-service/hybrid-mode.test.ts">
      Hybrid mode must attempt online first, then fall back to offline
    </Criterion>
    <Criterion id="AUS004" test="tests/anonymous-user-service/session-validation.test.ts">
      Session validation must work for both online and offline tokens
    </Criterion>
    <Criterion id="AUS005" test="tests/anonymous-user-service/error-handling.test.ts">
      All error modes must return appropriate error codes without throwing
    </Criterion>
  </ValidationCriteria>
  
  <IntegrationRequirements>
    <Requirement name="StateCompatibility">
      Both online and offline modes must produce compatible UserApplicationState
    </Requirement>
    <Requirement name="SessionCompatibility">
      Both modes must produce sessions compatible with existing auth system
    </Requirement>
    <Requirement name="GracefulDegradation">
      Service must never fail completely - offline mode always available
    </Requirement>
    <Requirement name="TransparentFallback">
      Caller should not need to know which mode was used
    </Requirement>
  </IntegrationRequirements>
</Interface>