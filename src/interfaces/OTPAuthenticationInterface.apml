# OTP Authentication Interface Specification
# APML Framework v1.3.3
# Created: 2025-05-25
# Purpose: Interface-first design for OTP authentication flow

## Interface Contract

### OTPAuthenticationState
```typescript
type OTPAuthState = 'EMAIL_ENTRY' | 'OTP_VERIFICATION' | 'AUTHENTICATED' | 'ERROR';

interface OTPAuthenticationInterface {
  // State Management
  currentState: OTPAuthState;
  email: string;
  otpCode: string;
  error: string | null;
  isLoading: boolean;

  // State Transitions
  onEmailSubmit: (email: string) => Promise<void>;      // EMAIL_ENTRY → OTP_VERIFICATION
  onOTPSubmit: (code: string) => Promise<void>;         // OTP_VERIFICATION → AUTHENTICATED
  onResendOTP: () => Promise<void>;                     // Stay in OTP_VERIFICATION
  onBackToEmail: () => void;                            // OTP_VERIFICATION → EMAIL_ENTRY
  onReset: () => void;                                  // Any state → EMAIL_ENTRY

  // UI State Queries
  showEmailForm: () => boolean;                         // currentState === 'EMAIL_ENTRY'
  showOTPForm: () => boolean;                          // currentState === 'OTP_VERIFICATION'
  isAuthenticated: () => boolean;                     // currentState === 'AUTHENTICATED'
  hasError: () => boolean;                            // error !== null
}
```

## State Machine Definition

### States
1. **EMAIL_ENTRY**: Initial state - user enters email address
2. **OTP_VERIFICATION**: User enters 6-digit verification code
3. **AUTHENTICATED**: User successfully verified, authentication complete
4. **ERROR**: Error occurred, show error message and allow retry

### Transitions
```
EMAIL_ENTRY --[onEmailSubmit success]--> OTP_VERIFICATION
EMAIL_ENTRY --[onEmailSubmit failure]--> ERROR

OTP_VERIFICATION --[onOTPSubmit success]--> AUTHENTICATED  
OTP_VERIFICATION --[onOTPSubmit failure]--> ERROR
OTP_VERIFICATION --[onBackToEmail]--> EMAIL_ENTRY
OTP_VERIFICATION --[onResendOTP]--> OTP_VERIFICATION

ERROR --[onReset]--> EMAIL_ENTRY
AUTHENTICATED --[onReset]--> EMAIL_ENTRY
```

## UI Component Interface

### EmailEntryForm
```typescript
interface EmailEntryFormProps {
  email: string;
  isLoading: boolean;
  error: string | null;
  onEmailChange: (email: string) => void;
  onSubmit: () => Promise<void>;
}
```

### OTPVerificationForm  
```typescript
interface OTPVerificationFormProps {
  email: string;           // Display which email OTP was sent to
  otpCode: string;
  isLoading: boolean;
  error: string | null;
  onOTPChange: (code: string) => void;
  onSubmit: () => Promise<void>;
  onResend: () => Promise<void>;
  onBackToEmail: () => void;
}
```

## Implementation Requirements

### Backend Integration
- **sendOTP(email: string): Promise<{success: boolean, error?: string}>**
- **verifyOTP(email: string, code: string): Promise<{success: boolean, error?: string}>**

### Validation Rules
- Email must be valid format
- OTP code must be exactly 6 digits
- Loading states prevent double-submission
- Error states must be clearable

### UX Requirements
- Immediate visual feedback on state transitions
- Clear error messages with retry options
- Accessible form controls and labels
- Mobile-friendly OTP input (numeric keypad)

## Success Criteria
1. ✅ User sees email form initially
2. ✅ After valid email submission, immediately shows OTP form
3. ✅ OTP form displays the email address for confirmation
4. ✅ Valid 6-digit OTP code triggers authentication
5. ✅ Error states allow graceful recovery
6. ✅ All transitions are immediate and predictable

## Anti-Patterns to Avoid
- ❌ State managed in multiple components
- ❌ Inconsistent error handling
- ❌ UI lag during state transitions
- ❌ Missing loading states
- ❌ Ambiguous error messages

## Testing Interface
```typescript
interface OTPAuthenticationTester {
  // State verification
  expectState(expectedState: OTPAuthState): boolean;
  expectEmailForm(): boolean;
  expectOTPForm(): boolean;
  
  // Action simulation
  simulateEmailSubmit(email: string): Promise<void>;
  simulateOTPSubmit(code: string): Promise<void>;
  simulateResend(): Promise<void>;
  simulateBackToEmail(): void;
  
  // Validation
  validateStateTransition(from: OTPAuthState, to: OTPAuthState): boolean;
}
```

This interface defines the complete contract for OTP authentication with clear state management, predictable transitions, and testable behavior.