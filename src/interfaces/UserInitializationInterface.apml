<?xml version="1.0" encoding="UTF-8"?>
<InterfaceSpecification name="UserInitializationInterface" version="1.0.0">
  <Purpose>
    Define interface contracts for initializing new users in the database after authentication
    Following External Service Integration Protocol for backend user creation
  </Purpose>

  <ExternalServiceContract>
    <ServiceName>Backend User Initialization API</ServiceName>
    <ServiceBehavior>
      <Behavior name="initializeUser" creates_database_records="true" side_effects="Creates user and user_state records">
        Creates new user records in database for authenticated users who don't yet exist
      </Behavior>
      <Behavior name="checkUserExists" authentication_required="true" returns_user_data="boolean">
        Verifies if user exists in database without creating records
      </Behavior>
    </ServiceBehavior>
  </ExternalServiceContract>

  <Methods>
    <Method name="initializeNewUser" returns="Promise<UserInitializationResult>">
      <Parameter name="userId" type="string" required="true">Authenticated user's unique identifier from auth system</Parameter>
      <Parameter name="email" type="string" required="true">User's verified email address</Parameter>
      <Parameter name="displayName" type="string" required="false">Optional display name (defaults to email prefix)</Parameter>
      <Parameter name="userType" type="'registered' | 'anonymous'" required="true">Type of user being created</Parameter>
      <Description>Creates complete user record with initial state in database</Description>
      <SideEffects>
        - Creates record in users table
        - Creates record in user_state table with default learning position
        - Establishes user's initial Triple Helix state
      </SideEffects>
    </Method>

    <Method name="ensureUserExists" returns="Promise<UserExistenceResult>">
      <Parameter name="userId" type="string" required="true">User identifier to check</Parameter>
      <Parameter name="accessToken" type="string" required="true">Authentication token for authorization</Parameter>
      <Description>Verifies user exists in database, creates if missing</Description>
      <SideEffects>May create user records if user authenticated but not in database</SideEffects>
    </Method>

    <Method name="getUserInitializationStatus" returns="Promise<UserInitializationStatus>">
      <Parameter name="userId" type="string" required="true">User identifier to check</Parameter>
      <Description>Checks current initialization status without side effects</Description>
      <SideEffects>None - read-only operation</SideEffects>
    </Method>
  </Methods>

  <DataStructures>
    <DataStructure name="UserInitializationResult">
      <Field name="success" type="boolean">Whether initialization completed successfully</Field>
      <Field name="user" type="UserRecord | null">Created user record or null if failed</Field>
      <Field name="userState" type="UserStateRecord | null">Created user state record or null if failed</Field>
      <Field name="error" type="string | null">Error message if initialization failed</Field>
      <Field name="errorCode" type="string | null">Error code for programmatic handling</Field>
    </DataStructure>

    <DataStructure name="UserExistenceResult">
      <Field name="exists" type="boolean">Whether user exists in database</Field>
      <Field name="requiresInitialization" type="boolean">Whether user needs to be created</Field>
      <Field name="user" type="UserRecord | null">User record if exists</Field>
      <Field name="error" type="string | null">Error message if check failed</Field>
    </DataStructure>

    <DataStructure name="UserInitializationStatus">
      <Field name="userExists" type="boolean">User record exists in database</Field>
      <Field name="userStateExists" type="boolean">User state record exists in database</Field>
      <Field name="isFullyInitialized" type="boolean">Both user and state records exist</Field>
      <Field name="missingComponents" type="string[]">List of missing components</Field>
    </DataStructure>

    <DataStructure name="UserRecord">
      <Field name="id" type="string">User's unique identifier</Field>
      <Field name="email" type="string">User's email address</Field>
      <Field name="displayName" type="string">User's display name</Field>
      <Field name="userType" type="'registered' | 'anonymous'">Type of user account</Field>
      <Field name="subscriptionTier" type="string">User's subscription level</Field>
      <Field name="createdAt" type="string">ISO timestamp of record creation</Field>
    </DataStructure>

    <DataStructure name="UserStateRecord">
      <Field name="userId" type="string">Associated user identifier</Field>
      <Field name="stitchPositions" type="Record<string, any>">User's learning positions</Field>
      <Field name="tripleHelixState" type="TripleHelixState">User's Triple Helix progress</Field>
      <Field name="spacedRepetitionState" type="Record<string, any>">Spaced repetition data</Field>
      <Field name="progressMetrics" type="ProgressMetrics">User's progress statistics</Field>
      <Field name="version" type="number">State version for optimistic locking</Field>
      <Field name="lastSyncTime" type="string">ISO timestamp of last sync</Field>
    </DataStructure>
  </DataStructures>

  <ErrorHandling>
    <ErrorState name="USER_ALREADY_EXISTS">
      <Description>User attempted to initialize but already exists in database</Description>
      <Recovery>Return existing user data, mark as successful</Recovery>
    </ErrorState>

    <ErrorState name="AUTHENTICATION_FAILED">
      <Description>Invalid or expired authentication token</Description>
      <Recovery>Require user to re-authenticate</Recovery>
    </ErrorState>

    <ErrorState name="PERMISSION_DENIED">
      <Description>User trying to initialize different user's record</Description>
      <Recovery>Reject request, log security event</Recovery>
    </ErrorState>

    <ErrorState name="DATABASE_ERROR">
      <Description>Database operation failed during user creation</Description>
      <Recovery>Rollback any partial changes, retry with exponential backoff</Recovery>
    </ErrorState>

    <ErrorState name="VALIDATION_ERROR">
      <Description>Invalid user data provided for initialization</Description>
      <Recovery>Return specific validation errors for correction</Recovery>
    </ErrorState>
  </ErrorHandling>

  <ServiceAdapterRequirements>
    <Requirement>Must isolate external service behavior from application logic</Requirement>
    <Requirement>Must provide consistent interface regardless of backend implementation</Requirement>
    <Requirement>Must handle all documented error states gracefully</Requirement>
    <Requirement>Must support offline/online mode detection</Requirement>
    <Requirement>Must provide immediate feedback on operation status</Requirement>
  </ServiceAdapterRequirements>

  <ValidationCriteria>
    <Criterion id="UI-001" test="tests/user-init/successful_creation_test.ts">
      New authenticated users must be successfully created in database with complete state
    </Criterion>
    <Criterion id="UI-002" test="tests/user-init/existing_user_handling_test.ts">
      Existing users must be identified without creating duplicate records
    </Criterion>
    <Criterion id="UI-003" test="tests/user-init/error_recovery_test.ts">
      Database errors must be handled gracefully with proper rollback
    </Criterion>
    <Criterion id="UI-004" test="tests/user-init/authentication_validation_test.ts">
      Only authenticated users can initialize their own records
    </Criterion>
    <Criterion id="UI-005" test="tests/user-init/default_state_test.ts">
      New users must be created with proper default learning state
    </Criterion>
  </ValidationCriteria>

  <IntegrationRequirements>
    <Integration with="UserSessionManager">
      Must be called after successful authentication before user state queries
    </Integration>
    <Integration with="UserStateInitializer">
      Must provide user existence check before attempting state loading
    </Integration>
    <Integration with="AuthToPlayerEventBus">
      Must complete before Auth-to-Player flow can start user state initialization
    </Integration>
  </IntegrationRequirements>
</InterfaceSpecification>