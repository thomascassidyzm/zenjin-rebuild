<?xml version="1.0" encoding="UTF-8"?>
<Interface name="ContentAccessControllerInterface" version="1.1.0" module="SubscriptionSystem">
  <Purpose>
    Defines the contract for the ContentAccessController component that manages access to premium content based on subscription status.
  </Purpose>
  
  <DataStructures>
    <Structure name="ContentItem">
      <Field name="id" type="string" required="true" description="Unique identifier for the content item" />
      <Field name="type" type="string" required="true" description="Type of content ('lesson', 'exercise', 'assessment')" />
      <Field name="accessLevel" type="string" required="true" description="Required access level ('free', 'basic', 'premium')" />
      <Field name="metadata" type="object" required="false" description="Additional metadata for the content item" />
    </Structure>
    
    <Structure name="AccessRights">
      <Field name="userId" type="string" required="true" description="User identifier" />
      <Field name="accessLevel" type="string" required="true" description="User's access level ('free', 'basic', 'premium')" />
      <Field name="specialAccess" type="string[]" required="false" description="IDs of content items with special access" />
      <Field name="expirationDate" type="string" required="false" description="ISO date string of access expiration" />
    </Structure>
  </DataStructures>
  
  <Methods>
    <Method name="checkAccess">
      <Description>Checks if a user has access to a specific content item</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="contentId" type="string" required="true" description="Content item identifier" />
      <Output name="result" type="object" description="Access check result">
        <Field name="hasAccess" type="boolean" description="Whether the user has access" />
        <Field name="reason" type="string" description="Reason for access result" />
      </Output>
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="CONTENT_NOT_FOUND" description="The specified content was not found" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="getUserAccessRights">
      <Description>Gets the access rights for a user</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Output name="accessRights" type="AccessRights" description="User's access rights" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="NO_ACCESS_RIGHTS" description="No access rights exist for this user" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="updateAccessRights">
      <Description>Updates the access rights for a user</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="accessLevel" type="string" required="true" description="New access level" />
      <Input name="expirationDate" type="string" required="false" description="ISO date string of access expiration" />
      <Output name="updatedRights" type="AccessRights" description="Updated access rights" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="INVALID_ACCESS_LEVEL" description="The specified access level is invalid" />
        <Error code="UPDATE_FAILED" description="Failed to update access rights" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="grantSpecialAccess">
      <Description>Grants special access to specific content items</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="contentIds" type="string[]" required="true" description="Content item identifiers" />
      <Input name="expirationDate" type="string" required="false" description="ISO date string of special access expiration" />
      <Output name="updatedRights" type="AccessRights" description="Updated access rights" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="CONTENT_NOT_FOUND" description="One or more content items were not found" />
        <Error code="GRANT_FAILED" description="Failed to grant special access" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="revokeSpecialAccess">
      <Description>Revokes special access to specific content items</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="contentIds" type="string[]" required="true" description="Content item identifiers" />
      <Output name="updatedRights" type="AccessRights" description="Updated access rights" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="REVOKE_FAILED" description="Failed to revoke special access" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="getAccessibleContent">
      <Description>Gets all content items accessible to a user</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="contentType" type="string" required="false" description="Filter by content type" />
      <Output name="contentItems" type="ContentItem[]" description="Array of accessible content items" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="INVALID_CONTENT_TYPE" description="The specified content type is invalid" />
      </Errors>
      <Async>false</Async>
    </Method>
  </Methods>
  
  <Dependencies>
    <!-- No external dependencies -->
  </Dependencies>
  
  <UsageExample>
```typescript
// Example usage of ContentAccessControllerInterface
import { ContentAccessController } from './components/ContentAccessController';

// Create content access controller
const contentAccessController = new ContentAccessController();

// Check if a user has access to content
const accessResult = contentAccessController.checkAccess('user123', 'content456');
console.log(`Has access: ${accessResult.hasAccess}`);
console.log(`Reason: ${accessResult.reason}`);

// Get user's access rights
const accessRights = contentAccessController.getUserAccessRights('user123');
console.log(`Access level: ${accessRights.accessLevel}`);
console.log(`Special access items: ${accessRights.specialAccess.length}`);
console.log(`Expiration date: ${accessRights.expirationDate}`);

// Update access rights based on subscription
const updatedRights = contentAccessController.updateAccessRights(
  'user123',
  'premium',
  new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now
);

console.log(`Updated access level: ${updatedRights.accessLevel}`);
console.log(`New expiration date: ${updatedRights.expirationDate}`);

// Grant special access to specific content
const withSpecialAccess = contentAccessController.grantSpecialAccess(
  'user123',
  ['premium-content-1', 'premium-content-2'],
  new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days from now
);

console.log(`Special access items: ${withSpecialAccess.specialAccess.join(', ')}`);

// Get all accessible content
const accessibleContent = contentAccessController.getAccessibleContent('user123', 'lesson');
console.log(`Accessible lessons: ${accessibleContent.length}`);
```
  </UsageExample>
</Interface>
