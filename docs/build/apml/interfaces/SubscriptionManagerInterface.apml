<?xml version="1.0" encoding="UTF-8"?>
<Interface name="SubscriptionManagerInterface" version="1.1.0" module="SubscriptionSystem">
  <Purpose>
    Defines the contract for the SubscriptionManager component that manages user subscriptions and content access.
  </Purpose>
  
  <DataStructures>
    <Structure name="SubscriptionPlan">
      <Field name="id" type="string" required="true" description="Unique identifier for the subscription plan" />
      <Field name="name" type="string" required="true" description="Name of the subscription plan" />
      <Field name="description" type="string" required="false" description="Description of the subscription plan" />
      <Field name="price" type="number" required="true" description="Price of the subscription plan" />
      <Field name="currency" type="string" required="true" description="Currency code (e.g., 'USD', 'EUR')" />
      <Field name="billingCycle" type="string" required="true" description="Billing cycle ('monthly', 'quarterly', 'annual')" />
      <Field name="features" type="string[]" required="false" description="List of features included in the plan" />
    </Structure>
    
    <Structure name="UserSubscription">
      <Field name="userId" type="string" required="true" description="User identifier" />
      <Field name="planId" type="string" required="true" description="Subscription plan identifier" />
      <Field name="status" type="string" required="true" description="Subscription status ('active', 'canceled', 'expired', 'trial')" />
      <Field name="startDate" type="string" required="true" description="ISO date string of subscription start" />
      <Field name="endDate" type="string" required="false" description="ISO date string of subscription end" />
      <Field name="autoRenew" type="boolean" required="true" description="Whether the subscription auto-renews" />
      <Field name="paymentMethod" type="string" required="false" description="Payment method identifier" />
      <Field name="lastBillingDate" type="string" required="false" description="ISO date string of last billing" />
      <Field name="nextBillingDate" type="string" required="false" description="ISO date string of next billing" />
    </Structure>
  </DataStructures>
  
  <Methods>
    <Method name="getSubscriptionPlans">
      <Description>Gets all available subscription plans</Description>
      <Output name="plans" type="SubscriptionPlan[]" description="Array of subscription plans" />
      <Errors>
        <!-- No specific errors for this method -->
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="getUserSubscription">
      <Description>Gets the current subscription for a user</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Output name="subscription" type="UserSubscription" description="User's current subscription" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="NO_SUBSCRIPTION" description="The user has no active subscription" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="createSubscription">
      <Description>Creates a new subscription for a user</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="planId" type="string" required="true" description="Subscription plan identifier" />
      <Input name="paymentMethod" type="string" required="false" description="Payment method identifier" />
      <Input name="autoRenew" type="boolean" required="false" description="Whether the subscription should auto-renew" defaultValue="true" />
      <Output name="subscription" type="UserSubscription" description="Created subscription" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="PLAN_NOT_FOUND" description="The specified plan was not found" />
        <Error code="PAYMENT_METHOD_INVALID" description="The payment method is invalid" />
        <Error code="SUBSCRIPTION_EXISTS" description="The user already has an active subscription" />
        <Error code="CREATION_FAILED" description="Failed to create the subscription" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="cancelSubscription">
      <Description>Cancels a user's subscription</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="endImmediately" type="boolean" required="false" description="Whether to end the subscription immediately" defaultValue="false" />
      <Output name="success" type="boolean" description="Whether the cancellation was successful" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="NO_SUBSCRIPTION" description="The user has no active subscription" />
        <Error code="CANCELLATION_FAILED" description="Failed to cancel the subscription" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="updateSubscription">
      <Description>Updates a user's subscription</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Input name="updates" type="object" required="true" description="Subscription updates">
        <Field name="planId" type="string" required="false" description="New subscription plan identifier" />
        <Field name="autoRenew" type="boolean" required="false" description="New auto-renew setting" />
        <Field name="paymentMethod" type="string" required="false" description="New payment method identifier" />
      </Input>
      <Output name="updatedSubscription" type="UserSubscription" description="Updated subscription" />
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
        <Error code="NO_SUBSCRIPTION" description="The user has no active subscription" />
        <Error code="PLAN_NOT_FOUND" description="The specified plan was not found" />
        <Error code="PAYMENT_METHOD_INVALID" description="The payment method is invalid" />
        <Error code="UPDATE_FAILED" description="Failed to update the subscription" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="checkSubscriptionStatus">
      <Description>Checks if a user has an active subscription</Description>
      <Input name="userId" type="string" required="true" description="User identifier" />
      <Output name="status" type="object" description="Subscription status">
        <Field name="hasActiveSubscription" type="boolean" description="Whether the user has an active subscription" />
        <Field name="planId" type="string" description="Current plan identifier (if active)" />
        <Field name="daysRemaining" type="number" description="Days remaining in the current billing cycle (if active)" />
      </Output>
      <Errors>
        <Error code="USER_NOT_FOUND" description="The specified user was not found" />
      </Errors>
      <Async>false</Async>
    </Method>
  </Methods>
  
  <Dependencies>
    <Dependency interface="ContentAccessControllerInterface" module="SubscriptionSystem" />
  </Dependencies>
  
  <UsageExample>
```typescript
// Example usage of SubscriptionManagerInterface
import { SubscriptionManager } from './components/SubscriptionManager';

// Create subscription manager
const subscriptionManager = new SubscriptionManager();

// Get all subscription plans
const plans = subscriptionManager.getSubscriptionPlans();
console.log(`Available plans: ${plans.length}`);
plans.forEach(plan => {
  console.log(`${plan.name}: ${plan.price} ${plan.currency} (${plan.billingCycle})`);
});

// Check subscription status
const status = subscriptionManager.checkSubscriptionStatus('user123');
console.log(`Has active subscription: ${status.hasActiveSubscription}`);
if (status.hasActiveSubscription) {
  console.log(`Current plan: ${status.planId}`);
  console.log(`Days remaining: ${status.daysRemaining}`);
}

// Create a new subscription
if (!status.hasActiveSubscription) {
  const subscription = subscriptionManager.createSubscription(
    'user123',
    'premium-monthly',
    'payment-method-123',
    true
  );
  
  console.log(`New subscription created: ${subscription.planId}`);
  console.log(`Start date: ${subscription.startDate}`);
  console.log(`Next billing: ${subscription.nextBillingDate}`);
}

// Update subscription
const updatedSubscription = subscriptionManager.updateSubscription('user123', {
  planId: 'premium-annual',
  autoRenew: true
});

console.log(`Updated to plan: ${updatedSubscription.planId}`);
console.log(`New end date: ${updatedSubscription.endDate}`);

// Cancel subscription
const canceled = subscriptionManager.cancelSubscription('user123', false);
console.log(`Subscription canceled: ${canceled}`);
```
  </UsageExample>
</Interface>
