<?xml version="1.0" encoding="UTF-8"?>
<Interface name="PlayerCardInterface" version="1.1.0" module="UserInterface">
  <Purpose>
    Defines the contract for the PlayerCard component that presents questions with binary choices and provides appropriate visual feedback based on user responses.
  </Purpose>
  
  <DataStructures>
    <Structure name="Question">
      <Field name="id" type="string" required="true" description="Unique identifier for the question" />
      <Field name="text" type="string" required="true" description="The question text to display" />
      <Field name="correctAnswer" type="string" required="true" description="The correct answer" />
      <Field name="distractor" type="string" required="true" description="The incorrect answer (distractor)" />
      <Field name="boundaryLevel" type="number" required="true" description="The boundary level (1-5) this question is testing" />
      <Field name="factId" type="string" required="true" description="The mathematical fact ID this question relates to" />
    </Structure>
    
    <Structure name="Response">
      <Field name="questionId" type="string" required="true" description="The ID of the question being answered" />
      <Field name="selectedAnswer" type="string" required="true" description="The answer selected by the user" />
      <Field name="isCorrect" type="boolean" required="true" description="Whether the selected answer is correct" />
      <Field name="responseTime" type="number" required="true" description="Time taken to respond in milliseconds" />
      <Field name="isFirstAttempt" type="boolean" required="true" description="Whether this is the first attempt at answering this question" />
    </Structure>
    
    <Structure name="FeedbackOptions">
      <Field name="duration" type="number" required="false" description="Duration of the feedback animation in milliseconds" defaultValue="1000" />
      <Field name="intensity" type="number" required="false" description="Intensity of the feedback animation (0.0-1.0)" defaultValue="0.8" />
      <Field name="sound" type="boolean" required="false" description="Whether to play sound with the feedback" defaultValue="true" />
    </Structure>
  </DataStructures>
  
  <Methods>
    <Method name="presentQuestion">
      <Description>Presents a question to the user with binary choices</Description>
      <Input name="question" type="Question" required="true" description="The question to present" />
      <Input name="options" type="object" required="false" description="Presentation options">
        <Field name="timeout" type="number" required="false" description="Timeout in milliseconds" defaultValue="30000" />
        <Field name="animation" type="string" required="false" description="Entry animation style" defaultValue="fade" />
      </Input>
      <Output name="presented" type="boolean" description="Whether the question was successfully presented" />
      <Errors>
        <Error code="INVALID_QUESTION" description="The question object is invalid or incomplete" />
        <Error code="PRESENTATION_FAILED" description="Failed to present the question due to rendering issues" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="handleResponse">
      <Description>Handles user response to a question and provides appropriate feedback</Description>
      <Input name="response" type="Response" required="true" description="The user's response" />
      <Input name="feedbackOptions" type="FeedbackOptions" required="false" description="Options for the feedback animation" />
      <Output name="result" type="object" description="Result of handling the response">
        <Field name="processed" type="boolean" description="Whether the response was successfully processed" />
        <Field name="feedbackShown" type="boolean" description="Whether feedback was shown to the user" />
      </Output>
      <Errors>
        <Error code="INVALID_RESPONSE" description="The response object is invalid or incomplete" />
        <Error code="FEEDBACK_FAILED" description="Failed to show feedback due to rendering issues" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="handleTimeout">
      <Description>Handles timeout when user doesn't respond within the allocated time</Description>
      <Input name="questionId" type="string" required="true" description="ID of the question that timed out" />
      <Output name="result" type="object" description="Result of handling the timeout">
        <Field name="processed" type="boolean" description="Whether the timeout was successfully processed" />
        <Field name="feedbackShown" type="boolean" description="Whether timeout feedback was shown to the user" />
      </Output>
      <Errors>
        <Error code="INVALID_QUESTION_ID" description="The question ID is invalid or unknown" />
        <Error code="FEEDBACK_FAILED" description="Failed to show timeout feedback due to rendering issues" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="reset">
      <Description>Resets the PlayerCard to its initial state</Description>
      <Output name="success" type="boolean" description="Whether the reset was successful" />
      <Errors>
        <Error code="RESET_FAILED" description="Failed to reset the PlayerCard" />
      </Errors>
      <Async>false</Async>
    </Method>
    
    <Method name="onAnswerSelected">
      <Description>Event callback when user selects an answer</Description>
      <EventData name="response" type="Response" description="The user's response data" />
      <Async>true</Async>
    </Method>
  </Methods>
  
  <Dependencies>
    <Dependency interface="FeedbackSystemInterface" module="UserInterface" />
    <Dependency interface="ThemeManagerInterface" module="UserInterface" />
  </Dependencies>
  
  <UsageExample>
```typescript
// Example usage of PlayerCardInterface
import { PlayerCard } from './components/PlayerCard';

// Create a question
const question = {
  id: 'mult-7-8-001',
  text: 'What is 7 Ã— 8?',
  correctAnswer: '56',
  distractor: '54',
  boundaryLevel: 5,
  factId: 'mult-7-8'
};

// Present the question
const playerCard = new PlayerCard();
playerCard.presentQuestion(question);

// Handle user response
playerCard.onAnswerSelected((response) => {
  console.log(`User selected: ${response.selectedAnswer}`);
  console.log(`Correct: ${response.isCorrect}`);
  console.log(`Response time: ${response.responseTime}ms`);
  
  // Process the response
  playerCard.handleResponse(response);
});

// Handle timeout if needed
setTimeout(() => {
  playerCard.handleTimeout(question.id);
}, 30000);
```
  </UsageExample>
</Interface>
